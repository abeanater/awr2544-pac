#[doc = "Register `SBERRADDR1` reader"]
pub type R = crate::R<Sberraddr1Spec>;
#[doc = "Register `SBERRADDR1` writer"]
pub type W = crate::W<Sberraddr1Spec>;
#[doc = "Field `SBERRADDR1` reader - 10:0\\]
Single Bit ECC Error Address This register holds the address of the RAM location when a single bit error is generated by SECDED block while reading the MibSPI (Receive) RXRAM. This error address is frozen from being updated until it is read by the VBUS host. Reading this register clears its contents to the default value The default value is 0x400 if Extended Buffer feature is enabled, else it is 0x200 Writes to this register are ignored."]
pub type Sberraddr1R = crate::FieldReader<u16>;
#[doc = "Field `SBERRADDR1` writer - 10:0\\]
Single Bit ECC Error Address This register holds the address of the RAM location when a single bit error is generated by SECDED block while reading the MibSPI (Receive) RXRAM. This error address is frozen from being updated until it is read by the VBUS host. Reading this register clears its contents to the default value The default value is 0x400 if Extended Buffer feature is enabled, else it is 0x200 Writes to this register are ignored."]
pub type Sberraddr1W<'a, REG> = crate::FieldWriter<'a, REG, 11, u16>;
#[doc = "Field `NU1` reader - 31:11\\]
Reserved.Reads return ΓÇÿ0ΓÇÖ and writes have no effect."]
pub type Nu1R = crate::FieldReader<u32>;
#[doc = "Field `NU1` writer - 31:11\\]
Reserved.Reads return ΓÇÿ0ΓÇÖ and writes have no effect."]
pub type Nu1W<'a, REG> = crate::FieldWriter<'a, REG, 21, u32>;
impl R {
    #[doc = "Bits 0:10 - 10:0\\]
Single Bit ECC Error Address This register holds the address of the RAM location when a single bit error is generated by SECDED block while reading the MibSPI (Receive) RXRAM. This error address is frozen from being updated until it is read by the VBUS host. Reading this register clears its contents to the default value The default value is 0x400 if Extended Buffer feature is enabled, else it is 0x200 Writes to this register are ignored."]
    #[inline(always)]
    pub fn sberraddr1(&self) -> Sberraddr1R {
        Sberraddr1R::new((self.bits & 0x07ff) as u16)
    }
    #[doc = "Bits 11:31 - 31:11\\]
Reserved.Reads return ΓÇÿ0ΓÇÖ and writes have no effect."]
    #[inline(always)]
    pub fn nu1(&self) -> Nu1R {
        Nu1R::new((self.bits >> 11) & 0x001f_ffff)
    }
}
impl W {
    #[doc = "Bits 0:10 - 10:0\\]
Single Bit ECC Error Address This register holds the address of the RAM location when a single bit error is generated by SECDED block while reading the MibSPI (Receive) RXRAM. This error address is frozen from being updated until it is read by the VBUS host. Reading this register clears its contents to the default value The default value is 0x400 if Extended Buffer feature is enabled, else it is 0x200 Writes to this register are ignored."]
    #[inline(always)]
    #[must_use]
    pub fn sberraddr1(&mut self) -> Sberraddr1W<Sberraddr1Spec> {
        Sberraddr1W::new(self, 0)
    }
    #[doc = "Bits 11:31 - 31:11\\]
Reserved.Reads return ΓÇÿ0ΓÇÖ and writes have no effect."]
    #[inline(always)]
    #[must_use]
    pub fn nu1(&mut self) -> Nu1W<Sberraddr1Spec> {
        Nu1W::new(self, 11)
    }
}
#[doc = "Single Bit Error Address Register - RXRAM\n\nYou can [`read`](crate::Reg::read) this register and get [`sberraddr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sberraddr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct Sberraddr1Spec;
impl crate::RegisterSpec for Sberraddr1Spec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`sberraddr1::R`](R) reader structure"]
impl crate::Readable for Sberraddr1Spec {}
#[doc = "`write(|w| ..)` method takes [`sberraddr1::W`](W) writer structure"]
impl crate::Writable for Sberraddr1Spec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets SBERRADDR1 to value 0"]
impl crate::Resettable for Sberraddr1Spec {
    const RESET_VALUE: u32 = 0;
}
